//堆排序
#include <iostream>
#include <stdlib.h>
using namespace std;

void HeapAdjust(int a[] , int parent, int length) {

	int temp = a[parent]; // temp保存当前父节点
	int child = 2 * parent + 1; // 先获得左孩子
	while (child < length) {

		// 如果有右孩子结点，并且右孩子结点的值大于左孩子结点，则选取右孩子结点

		if (child + 1 < length && a[child] < a[child + 1]) {

			child++;

		}

		// 如果父结点的值已经大于孩子结点的值，则直接结束

		if (temp >= a[child])

			break;
		// 把孩子结点的值赋给父结点

		a[parent] = a[child];
		// 选取孩子结点的左孩子结点,继续向下筛选

		parent = child;

		child = 2 * child + 1;

	}
	a[parent] = temp;

}
void heapSort(int a[]) {

	// 循环建立初始堆

	for (int i = 9 / 2; i >= 0; i--) {

		HeapAdjust(a, i, 10 - 1);

	}
	// 进行n-1次循环，完成排序

	for (int i = 10 - 1; i > 0; i--) {

		// 最后一个元素和第一元素进行交换

		int temp = a[i];

		a[i] = a[0];

		a[0] = temp;
		// 筛选 R[0] 结点，得到i-1个结点的堆

		HeapAdjust(a, 0, i);
	}

}
int main()
{
	int a[10] ={ 1, 3, 4, 5, 2, 6, 9, 7, 8, 0 };
	heapSort(a);
	for(int i = 0; i < 10; i++)
	{
		cout << a[i] << ",";
	}
	cout << endl;
	system("pause");
	cout << "hello" << endl;
	return 0;
}
