
// LiShuo_AT_LTEDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "LiShuo_AT_LTE.h"
#include "LiShuo_AT_LTEDlg.h"
#include "afxdialogex.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CLiShuo_AT_LTEDlg 对话框




CLiShuo_AT_LTEDlg::CLiShuo_AT_LTEDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CLiShuo_AT_LTEDlg::IDD, pParent)
	, m_Edit_ATcmd_Tx_Str(_T(""))
	, m_Edit_ATCmd_Rx_Str(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CLiShuo_AT_LTEDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_MSCOMM1, m_MSComm1);
	DDX_Control(pDX, IDC_COMBO2, m_Comb_baud);
	DDX_Control(pDX, IDC_COMBO1, m_Comb_PortNum);
	DDX_Control(pDX, IDC_EDIT1, m_Edit_ATCmd_Tx);
	DDX_Text(pDX, IDC_EDIT1, m_Edit_ATcmd_Tx_Str);
	DDX_Text(pDX, IDC_EDIT5, m_Edit_ATCmd_Rx_Str);
	DDX_Control(pDX, IDC_EDIT5, m_ATCmd_Rx_Ctrl);
}

BEGIN_MESSAGE_MAP(CLiShuo_AT_LTEDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CLiShuo_AT_LTEDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &CLiShuo_AT_LTEDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON4, &CLiShuo_AT_LTEDlg::OnBnClickedButton4)
	ON_WM_TIMER()
	ON_BN_CLICKED(IDC_BUTTON3, &CLiShuo_AT_LTEDlg::OnBnClickedButton3)
	ON_CBN_SELCHANGE(IDC_COMBO1, &CLiShuo_AT_LTEDlg::OnCbnSelchangeCombo1)
	ON_EN_CHANGE(IDC_EDIT1, &CLiShuo_AT_LTEDlg::OnEnChangeEdit1)
	ON_EN_CHANGE(IDC_EDIT5, &CLiShuo_AT_LTEDlg::OnEnChangeEdit5)
	ON_EN_CHANGE(IDC_EDIT3, &CLiShuo_AT_LTEDlg::OnEnChangeEdit3)
	ON_EN_CHANGE(IDC_EDIT4, &CLiShuo_AT_LTEDlg::OnEnChangeEdit4)
	ON_BN_CLICKED(IDOK, &CLiShuo_AT_LTEDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDCANCEL, &CLiShuo_AT_LTEDlg::OnBnClickedCancel)
END_MESSAGE_MAP()


// CLiShuo_AT_LTEDlg 消息处理程序

BOOL CLiShuo_AT_LTEDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
	// 串口选择组合框
	CString m_str1;
	int i;
	for(i=0;i<15;i++)
	{
		m_str1.Format(_T("com %d"),i+1);
		m_Comb_PortNum.InsertString(i,m_str1);
	}
	m_Comb_PortNum.SetCurSel(3);//预置COM口

	//波特率选择组合框
	CString m_str2[]={_T("300"),_T("600"),_T("1200"),_T("2400"),_T("4800"),_T("9600"),
		            _T("19200"),_T("38400"),_T("43000"),_T("56000"),_T("57600"),_T("115200")};
	for(i=0;i<12;i++)
	{
		int judge_tf=m_Comb_baud.AddString(m_str2[i]);
		if((judge_tf==CB_ERR)||(judge_tf==CB_ERRSPACE))
			MessageBox(_T("build baud error!"));
	}
	m_Comb_baud.SetCurSel(11);//预置波特率为"9600"

	CComboBox* pNumberWnd=(CComboBox*)GetDlgItem(IDC_EDIT3);
	CComboBox* pContentWnd=(CComboBox*)GetDlgItem(IDC_EDIT2);
	CComboBox* pSMSCWnd=(CComboBox*)GetDlgItem(IDC_EDIT4);

	pNumberWnd->SetWindowTextA(_T("13908468594"));
	pContentWnd->SetWindowTextA(_T("你好"));
	pSMSCWnd->SetWindowTextA(_T("13800731500"));

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CLiShuo_AT_LTEDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CLiShuo_AT_LTEDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		//SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CLiShuo_AT_LTEDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CLiShuo_AT_LTEDlg::OnBnClickedButton1()
{
	// TODO: 在此添加控件通知处理程序代码
	// 打开串口
	CString m_str_baud;
	CString m_str_OC_button;
	CString m_str1;

	GetDlgItemText(IDC_BUTTON1,m_str_OC_button);
	CWnd *h1;
	h1=GetDlgItem(IDC_BUTTON1);



	if(!m_MSComm1.get_PortOpen())
	{
		m_Comb_baud.GetLBText(m_Comb_baud.GetCurSel(),m_str_baud);//获取波特率
		m_str_baud = m_str_baud+','+'n'+','+'8'+','+'1';			//设置串口参数
		
		m_MSComm1.put_CommPort((m_Comb_PortNum.GetCurSel()+1));	//选择串口号
		m_MSComm1.put_InputMode(1);			                    //设置输入方式为二进制方式
		m_MSComm1.put_Settings(m_str_baud);		                //波特率为（根据combox），无校验，8数据位，1个停止位
		m_MSComm1.put_InputLen(1024);							//设置当前接收区数据长度为1024
		m_MSComm1.put_RThreshold(1);							//缓冲区一个字符引发事件
		//m_MSComm1.put_RTSEnable(1);								//设置RT允许
			
		m_MSComm1.put_PortOpen(true);		//打开串口

		if(m_MSComm1.get_PortOpen())
		{
			m_str1=_T("关闭串口");
			UpdateData(true);
			h1->SetWindowText(m_str1);			//改变按钮名称为‘’关闭串口”
		}
	}
	else
	{
		m_MSComm1.put_PortOpen(false);
		if(m_str_OC_button != _T("打开串口"))
		{
			m_str1=_T("打开串口");
			UpdateData(true);
			h1->SetWindowText(m_str1);			//改变按钮名称为打开串口
		}
	}



}


void CLiShuo_AT_LTEDlg::OnBnClickedButton2()
{
	// TODO: 在此添加控件通知处理程序代码
	CString m_str1;
	UpdateData(true);							//更新控件数据
	

	m_str1 = m_Edit_ATcmd_Tx_Str;
	m_str1 = m_str1 + _T("\r");
	m_MSComm1.put_Output(COleVariant(m_str1));//把发送编辑框的数据发送出去

}
BEGIN_EVENTSINK_MAP(CLiShuo_AT_LTEDlg, CDialogEx)
	ON_EVENT(CLiShuo_AT_LTEDlg, IDC_MSCOMM1, 1, CLiShuo_AT_LTEDlg::OnCommMscomm1, VTS_NONE)
END_EVENTSINK_MAP()


void CLiShuo_AT_LTEDlg::OnCommMscomm1()
{
	// TODO: 在此处添加消息处理程序代码
	if(m_MSComm1.get_CommEvent()==2)
	{
		char str[1024]={0};
		long k;
		VARIANT InputData=m_MSComm1.get_Input();	//读缓冲区
		COleSafeArray fs;
		fs=InputData;	//VARIANT型变À量转换为COleSafeArray型变量
		for(k=0;k<fs.GetOneDimSize();k++)
		fs.GetElement(&k,str+k);	//转换为BYTE型数组
		 
		m_Edit_ATCmd_Rx_Str+=str;      //	接收到编辑框里面
		//m_Edit_ATCmd_Rx_Str+=_T("\n");
		//SetTimer(1,10,NULL);		//延时10ms
		UpdateData(false);
	}

}

void CLiShuo_AT_LTEDlg::OnTimer(UINT_PTR nIDEvent)
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值
	CString m_Str_Tx;
	m_ATCmd_Rx_Ctrl.SetSel(-1, -1);
	switch(m_ATCmd_Send_State)
	{
		case 0:
		{
			m_Str_Tx = _T("AT\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 1;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 1:
		{
			m_Str_Tx = _T("AT+CIMI\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 2;
			KillTimer(1);
			SetTimer(1,2000,NULL);
			break;
		}
		case 2:
		{
			m_Str_Tx = _T("AT+CMEE=2\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 3;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 3:
		{
			m_Str_Tx = _T("AT+CGDCONT=1,\"IP\"\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 4;
			KillTimer(1);
			SetTimer(1,3000,NULL);
			break;
		}
		case 4:
		{
			m_Str_Tx = _T("AT+CFUN=1\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 5;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		//--------------卡操作-------------------
		case 5:
		{
			m_Str_Tx = _T("AT+CLCK=\"SC\",2\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 6;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 6:
		{
			m_Str_Tx = _T("AT+CLIP=1\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 7;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 7:
		{
			m_Str_Tx = _T("AT+CPIN?\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 8;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 8:
		{
			m_Str_Tx = _T("AT+CREG=1\r");
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 9;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 9:
		{
			m_Str_Tx = _T("AT+CMGF=0\r");//设置短信为PDU格式
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 10;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 10:
		{
			m_Str_Tx = _T("AT^CARDMODE\r");//返回值为2表示SIM卡为 USIM
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 11;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 11://---------搜网-------------------
		{
			m_Str_Tx = _T("AT+CFUN=1\r");//返回值为2表示SIM卡为 USIM
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 12;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 12:
		{
			m_Str_Tx = _T("AT^SYSCONFIG?\r");//返回值为2表示SIM卡为 USIM
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 13;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 13:
		{
			m_Str_Tx = _T("AT+COPS=?\r");//运营商选择
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 14;
			KillTimer(1);
			SetTimer(1,10000,NULL);//等待10秒钟
			break;
		}
		case 14:
		{
			m_Str_Tx = _T("AT+COPS=0\r");//自动搜网
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 15;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 15:
		{
			m_Str_Tx = _T("AT+CSQ\r");//显示信号强度
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 16;
			KillTimer(1);
			SetTimer(1,1000,NULL);
			break;
		}
		case 16:
		{
			m_Str_Tx = _T("AT+CSCA=\"+8613800731500\"\r");//设置短信中心
			m_Edit_ATCmd_Rx_Str += m_Str_Tx;
			UpdateData(false);
			m_MSComm1.put_Output(COleVariant(m_Str_Tx));
			m_ATCmd_Send_State = 16;
			KillTimer(1);
			//SetTimer(1,1000,NULL);
			break;
		}

		default:break;
	}
	
	UpdateData(true);
	

	CDialogEx::OnTimer(nIDEvent);
}


void CLiShuo_AT_LTEDlg::OnBnClickedButton4()
{
	// TODO: 在此添加控件通知处理程序代码
	m_ATCmd_Send_State = 0;
	SetTimer(1,1000,NULL);
}

CString CLiShuo_AT_LTEDlg::CreatePDU_SMS(CString sDestAddr,CString userData, UINT *nDataLength)
{
	CString sResult;


	return sResult;
}




void CLiShuo_AT_LTEDlg::OnBnClickedButton3()//发送短信
{
	// TODO: 在此添加控件通知处理程序代码
	CString m_Str_Tx;
	SM_PARAM SmParam;

	CComboBox* pNumberWnd=(CComboBox*)GetDlgItem(IDC_EDIT3);
	CComboBox* pContentWnd=(CComboBox*)GetDlgItem(IDC_EDIT2);
	CComboBox* pSMSCWnd=(CComboBox*)GetDlgItem(IDC_EDIT4);

	CString strSmsc;
	CString strNumber;
	CString strContent;


	m_Str_Tx = _T("AT+CMGF=0\r");//设置短信格式为PDU
	m_Edit_ATCmd_Rx_Str += m_Str_Tx;
	UpdateData(false);
	m_MSComm1.put_Output(COleVariant(m_Str_Tx));

	//strSmsc = theApp.m_strSmsc;
	pSMSCWnd->GetWindowText(strSmsc);
	pNumberWnd->GetWindowText(strNumber);
	pContentWnd->GetWindowText(strContent);

	// 检查号码
	if(strNumber.GetLength() < 11)
	{
		MessageBox(_T("请输入正确的号码！"));
		pNumberWnd->SetFocus();
		pNumberWnd->SetEditSel(-1, 0);
		return;
	}

	// 检查短消息内容是否空，或者超长
	CString strUnicode;
	WCHAR wchar[1024];
	
	int nCount = ::MultiByteToWideChar(CP_ACP, 0, strContent, -1, wchar, 1024);
	if(nCount <= 1)
	{
		MessageBox(_T("请输入消息内容！"));
		pContentWnd->SetFocus();
		pContentWnd->SetEditSel(-1, 0);
		return;
	}
	else if(nCount > 70)		// 我们决定全部用UCS2编码，最大70个字符(半角/全角)
	{
		MessageBox(_T("消息内容太长，无法发送！"));
		pContentWnd->SetFocus();
		pContentWnd->SetEditSel(-1, 0);
		return;
	}

	//if(MessageBox(_T("确定发送吗？"), MB_YESNO) == IDYES)
	if(1)
	{
		

		memset(&SmParam, 0, sizeof(SM_PARAM));

		// 去掉号码前的"+"
		if(strSmsc[0] == '+')  strSmsc = strSmsc.Mid(1);
		if(strNumber[0] == '+')  strNumber = strNumber.Mid(1);

		// 在号码前加"86"
		if(strSmsc.Left(2) != "86")  strSmsc = "86" + strSmsc;
		if(strNumber.Left(2) != "86")  strNumber = "86" + strNumber;

		// 填充短消息结构
		strcpy(SmParam.SCA, strSmsc);
		strcpy(SmParam.TPA, strNumber);
		strcpy(SmParam.TP_UD, strContent);
		SmParam.TP_PID = 0;
		SmParam.TP_DCS = GSM_UCS2;

		// 发送短消息
		//theApp.m_pSmsTraffic->PutSendMessage(&SmParam);

		// 列表中加入新串
		//if(pNumberWnd->FindStringExact(-1, strNumber)<0)  pNumberWnd->InsertString(0, strNumber);
		//if(pContentWnd->FindStringExact(-1, strContent)<0)  pContentWnd->InsertString(0, strContent);
	}
	
	pContentWnd->SetFocus();
	pContentWnd->SetEditSel(-1, 0);	


	SendMessage(&SmParam);
}


int CLiShuo_AT_LTEDlg::SendMessage(SM_PARAM* pSrc)
{
	int nPduLength;		// PDU串长度
	unsigned char nSmscLength;	// SMSC串长度
	int nLength;		// 串口收到的数据长度
	char cmd[16];		// 命令串
	char pdu[512];		// PDU串
	char ans[128];		// 应答串

	nPduLength = gsmEncodePdu(pSrc, pdu);	// 根据PDU参数，编码PDU串
	strcat(pdu, "\x01a");		// 以Ctrl-Z结束
//	TRACE("%s", pdu);  //zhao
	gsmString2Bytes(pdu, &nSmscLength, 2);	// 取PDU串中的SMSC信息长度
	nSmscLength++;		// 加上长度字节本身

	// 命令中的长度，不包括SMSC信息长度，以数据字节计
	sprintf(cmd, "AT+CMGS=%d\r", nPduLength / 2 - nSmscLength);	// 生成命令

//	TRACE("%s", cmd);  
//	TRACE("%s\n", pdu);

	//WriteComm(cmd, strlen(cmd));	// 先输出命令串
	m_MSComm1.put_Output(COleVariant(cmd));
	//nLength = ReadComm(ans, 128);	// 读应答数据
	Sleep(1000);
	// 根据能否找到"\r\n> "决定成功与否
	//if(nLength == 4 && strncmp(ans, "\r\n> ", 4) == 0)
	{
		//return WriteComm(pdu, strlen(pdu));		// 得到肯定回答，继续输出PDU串
		m_MSComm1.put_Output(COleVariant(pdu));
	}

	return 0;
}


//	//m_Str_Tx = _T("AT+CGREG=1\r");
//	//m_MSComm1.put_Output(COleVariant(m_Str_Tx));
//	//::Sleep(1000);
//











void CLiShuo_AT_LTEDlg::OnCbnSelchangeCombo1()
{
	// TODO: 在此添加控件通知处理程序代码
}


void CLiShuo_AT_LTEDlg::OnEnChangeEdit1()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void CLiShuo_AT_LTEDlg::OnEnChangeEdit5()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void CLiShuo_AT_LTEDlg::OnEnChangeEdit3()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void CLiShuo_AT_LTEDlg::OnEnChangeEdit4()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void CLiShuo_AT_LTEDlg::OnBnClickedOk()
{
	// TODO: 在此添加控件通知处理程序代码
	CDialogEx::OnOK();
}


void CLiShuo_AT_LTEDlg::OnBnClickedCancel()
{
	// TODO: 在此添加控件通知处理程序代码
	CDialogEx::OnCancel();
}
