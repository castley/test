//微软2010年笔试题
//在一个排列中，如果一对数的前后位置与大小顺序相反，
//即前面的数大于后面的数，那么它们就称为一个逆序数对。
//一个排列中逆序的总数就称为这个排列的逆序数。
//如{2，4，3，1}中，2和1，4和3，4和1，3和1是逆序数对，
//因此整个数组的逆序数对个数为4，现在给定一数组，要求统计出该数组的逆序数对个数。

#include <iostream>
#include <stdlib.h>
using namespace std;
int count1;
void merge1(int a[], int low, int mid, int high, int temp[])
{
	int i = low;
	int j = mid+1;
	int k = 0;
	int m = mid;
	int h = high;
	while(i <= m && j <= h)
	{
		if(a[i] <= a[j])   //这里应该加上等于号，不然（2，2）也是逆序对数
		{
			temp[k++] = a[i++];
		}else
		{
			temp[k++] = a[j++];
			count1+= m - i + 1;
		}	
	}
	while(i <= m)
		temp[k++] = a[i++];
	while(j <= h)
		temp[k++] = a[j++];
	for(int i = 0; i < k; i++)
	{
		a[i+low] = temp[i];
	}
}

void merge2(int a[], int first, int last, int temp[])
{
	if(first < last)
	{
		//错误：int mid = (last - first ) / 2;
		int mid = (last+first) / 2;
		merge2(a, first, mid, temp);
		merge2(a, mid+1,last, temp);
		merge1(a,first,mid,last,temp);
	}	
}

bool merge3(int a[], int maxn)
{
	int *p = new int[maxn];
	if(p==NULL)
		return false;
	merge2(a,0,maxn-1,p);
	return true;
}
int main()
{
	int a[6] = {3,5,6,1,3,9};
	count1 = 0; // 不能写成int count1 = 0; 
	merge3(a,6);
	cout << endl;
	cout << count1 << endl;
	for(int i = 0; i < 6; i++)
	{
		cout << a[i] << endl;
	}
	system("pause");
	return 0; 
}
